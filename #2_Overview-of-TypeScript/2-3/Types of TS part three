이번 강의에서는
Typescript의 매우 독특한 타입을 몇 가지 살펴 본다.

독특하다고 말하는 이유는,
이전 영상에서는 'JavaScript'에서도 쓰이는 타입을 다뤘기 때문이다.
예를 들어 number나 boolean이나 string처럼

지금부터 할 것은 TypeScript에서만 존재하는 것이다

Typescript의 핵심은
Type Checker와 소통하는 것이다.

우리가 코드의 타입을 설명해주면
TypeScript가 우리가 바보 같은 짓을 할 때 보호해주는것이다.



그러면 어떤 타입인지 모르는 변수는 TypeScript에게 어떻게 말해줘야 할까?

unknown
ex) let a :unknown;

이렇게 하면 Typescript에서 일종의 보호를 받게된다.
어떤 작업을 하려면 이 변수의 타입을 먼저 확인해야 하는 방식으로 보호된다.

if(typeof a === "number"){
    let b = a + 1
}

if(typeof a === "string"){
    let b = a.toUpperCase()
}

이게 unknown이다.
변수의 타입을 미리 알지 못할 때 unknown을 사용한다.


다음으로 이야기할 것은 void라는 거다.
void 란?

void는 아무것도 return하지 않는 함수를 대상으로 사용한다.
function hello(){
    console.log('x')
}

보통 void를 따로 지정해줄 필요는 없다.
보다시피 TypeScript는 이 함수가 아무것도 return하지 않는다는 것을 자동으로 인식한다.


마지막으로 알아야 할 타입은 'never'이다.

never 란?
never는 함수가 절대 return하지 않을 때 발생한다.
예를 들어 함수에서 exception(예외)이 발생할 때 말이다.

function hello(){
    return "x"
}
x를 반환하는 hello라는 함수가 있는데

function hello():never{
    return "x"
}
never라는 타입을 지정하면 함수가 작동하지 않는다.

하지만 오류를 발생시키면
function hello():never{
    throw new Error("Error") <-- 이건 return 하지 않고 오류를 발생시키는 함수
}
모든게 정상적으로 작동된다.

또한 never는 타입이 두가지 일 수도 있는 상황에 발생할 수 있다.
예를 들어
function hello(name:string|number):never{
    if(typeof name === "string"){
        name <-- 여기서는 string타입
    }else if(typeof name === "number"){
        name <-- 여기서는 number타입
    }else{
        name <--여기서는 never타입 이므로 절대로 실행되지 않는 장소이다
    }
}
Hello에서 name을 받고 이게 string이거나 number라고 가정한다.

