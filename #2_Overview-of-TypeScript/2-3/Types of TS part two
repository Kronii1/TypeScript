이번 강의에서는 더많은 타입들을 살펴볼거야.

코드를 보고 머리속에 담아둘 필요도 없고
외울 필요도 없다. 그냥 이해만 하도록 노력하자.

내가 원한다면 readonly 속성을 타입에
추가할 수도 있다는 것.

readonly 속성은 매우 멋진데
요소들을 '읽기 전용'으로 만들 수 있기 때문이다.
'JavaScript'는 기본적으로 이런 동작이 없다.

type Age = number;
type Name = string;
type Player = {
    readonly name:Name
    age?:Age
}

const playerMaker = (name:string) : Player => ({name})
const kronii = playerMaker("kronii")
kronii.age = 314

readonly를 사용하는 방법은
변수이름 앞에 readonly를 써주면된다

이제 Player의 name을 수정하려고 시도하면
TypeScript가 우리를 멈춘다
왜냐하면 TypeScript에게 name의 속성은 readonly라고 말했기 때문이다.


(두번째 예시)
const numbers = readonly number[] = [1,2,3,4]

numbers.push(1) <-- 오류 발생
readonly이기 때문에 값을 넣을 수 없음



Tuple 이란?
Tuple은 array를 생성할 수 있게 하는데
최소한의 길이를 가져야 하고
특정 위치에 특정 타입이 있어야 한다.

한 array를 만든다고 가정했을 때,
["kronii",12,true]

이 array는
첫번째는 string,
두번째는 number,
세번째는 boolean이 와야 할거야

이걸 TypeScript의 방식으로 바꾸면

const player : [string,number,boolean] = []
만약 보호장치가 필요하고
TypeScript에게 이 array가 최소 3개의 아이템을 가지며,
string, number, boolean 순서대로여야 함을 알려야 한다고 할 때 유용하다.

const player : [string,number,boolean] = ["kronii, 1, true"]
그저 이걸 사용하면 항상 정해진 갯수의 요소를 가져야 하는
array를 지정할 수 있다는 것을 기억하면 된다.
또한 여러분이 원하는 순서에 맞는 타입을 가져야 하고


또는 이렇게 써도 보호장치가 발생한다.
player[0] = 1
이렇게 되면 첫 index값이 string타입이어야하기 때문에 오류가 발생한다.

우리가 하고 있는 모든것들
 [string,number,boolean] 여기 이것들은
 TypeScript에만 존재한다.

"JavaScfipt"는 tuple이 존재하지 않는다.


any 란?
any라는 타입을 많이 보게 될건데,
왜냐하면 여러분들이 비어있는 값들을 쓰면 기본값이 any가 된다.
let a = [] <-- a의 데이터 타입은 any[] 이다.

any는 TypeScript로부터 빠져나오고 싶을 때 쓰는 타입이다. (보호장치 같은 것)
혹은 우리가 TypeScript한테 바보 같은 짓을 하고 싶다고 허락을 받고 싶을 때 사용한다.

any는 말 그대로 아무 타입이나 가능하기 때문이다.

TypeScript 설정에 any 사용을 막기위해 추가할 수 있는 몇 가지 규칙이 존재한다.
그럼에도 불구하고 any는 TypeScript에 존재하고 우린 그것을 사용하는 방법을 배울 필요가 있다.
선생님 조언은 any를 사용하지 않는 것인데
any는 TypeScript를 빠져나오는 방법이기 때문이다.

(예시)
const a : any[] = [1,2,3,4]
const b : any = true

a + b
보호장치가 박살나고 둘이 +되는 결과가 된다

const a = [1,2,3,4]
const b  = true
이렇게 되면 TypeScript로 부터 보호받아 a+b가 성립되지 않는다.

이번 강의애서는
readonly, Tuple, any에 대해서배웠다.


다음강의에서는
void, never, unknown에 대해서 알아본다.


