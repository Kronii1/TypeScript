이번영상에서는
실제로 제네릭을 어떻게 다루는지 살펴보고 우리의 모험을 마무리 지을 거야

type SuperPrint = <T>(a:T[]) => T

const superPrint : SuperPrint = (a) => a[0]

=> 일반함수로 대체가능
function superPrint<V>(a:V[]){
    return a[0]
}
이게 superPrint를 구현한거야

const a = superPrint([1,2,3,4])
cosnt b = superPrint([true,false,true])


type Player<E> = {
    name:string
    extraInfo:E
}

type KroniiExtra = {
    favFood : string
}

type KroniiPlayer = Player<KroniiExtra>

const kronii: KroniiPlayer = {
    name:"kronii",
    extraInfo:{
        favFood:"pizza"
    }
}
이런식으로 내가 원하는대로 코드를 확장하는 것이 가능하다.
예를 들면 여기에
KroniiExtra타입을 만들고 Player 타입의 제네릭 안에 넣어줬지
그리고 그걸 KroniiPlayer라는 새로운 타입을 만들고 그걸 사용했지

const ahri : Player<null> = {
    name:"ahri",
    extraInfo:null
}

만약 많은 것들이 있는 큰 타입을 하나 가지고 있는데
그중 하나가 달라질 수 있는 타입이라면,
제네릭을 넣거나 커스텀한 타입을 보낼 수도 있다.


/*

// 1. last(arr)
function lastFunc<V>(a: V[]) {
  return a[a.length - 1];
}

const a = lastFunc([1, 2, 3, 4]);

console.log("last(arr) Last Index value is " + a);

// 2. prepend(arr,item)
function prepend<V>(a: V[], b: V) {
  return (a[0] = b);
}

const b = prepend([], "K");
console.log("prepend First Index value is " + b);

// 3. mix(arr,arr)
function mix<V, M>(a: V[], b: M[]) {
  const arr = [...a, ...b];
  return arr;
}

const c = mix([1, 2], ["hi"]);
console.log("mix value is " + c);

// 4. count(arr)
function count<V>(a: V[]) {
  return a.length;
}

const d = count([1, 2, 3, 4, 5, 6, "t"]);
console.log("count func value is " + d);

// 5.findIndex(arr,item)
function findIndex<V>(a: V[], b: V) {
  const findNum = a.find((num) => num == b);
  if (findNum) {
    return a.indexOf(findNum);
  } else {
    return null;
  }
}

const e = findIndex([4, 2, 3, 1, 5], 1);
console.log("findIndex func value is " + e);

// 6.slice(arr,startIndex,endIndex)
function slice<V>(a: V[], startIndex: number, endIndex?: number) {
  if (endIndex == undefined) {
    return a.slice(startIndex);
  } else {
    return a.slice(startIndex, endIndex);
  }
}

const f = slice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 4);
console.log("slice func value is " + f);

const f1 = slice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5);
console.log("slice f1 func value is " + f1);
*/
