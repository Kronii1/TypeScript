이번 섹션에서는
함수에 대해 얘기 해볼거야

call signatures라는 불리는 것을 알아볼거야
다형성(polymorphism)이란 것과 오버로딩(overloading)이란 것도 배울 거야

자, 이제 우리만의 call signature를 어떻게 선언할 것인지 알고 싶어

우선 type이라 적고, 변수이름은 네 마음대로 지을 수 있다.
a와 b에 number타입을 주고

type Add = (a:number,b:number) => number;
이게 바로 함수의 call signature타입을 만드는것임.

const add:Add = (a,b) =>  a + b
이렇게하면, 타입스크립트한테 타입이 number라고 말해줄 필요가 없다.
왜냐면 타입스크립트는 add의 타입을 알기 때문이다.

Add라는 타입을 타입스크립트가 알지.
call signature를 말이야

타입스크립트가 유추할 수 있게 된거야.
이 parameter a number라는 걸 알게 되고, parameter b도 number인걸 알 수 있지

이 말은 네가 타입을 만들 수 있고,
함수가 어떻게 작동하는 지 서술해둘 수 있다.
내가 그 함수를 구현하기 전에 말이야. 아주좋은거지

첫번째로 내가 타입을 생각하도록 해줘
먼저 함수의 타입을 설명하고, 그리고나서 코드를 구현하게 되지
그전에 우리는 이런것들을 해줘야했어.
const add = (a:number,b:number) => a + b

그런데 이 경우엔 그 과정을 분리해서 구현할 수 있지.
type Add = (a:number,b:number) => number  --> 여기 얘네들이 call signature이야.
이제 이걸 엄청 많이 쓰게 될 거야

만약 내가 React.js로 코딩하고 있다면
props 로 함수를 보내게 되면, 타입스크립트한테 설명해줘야 해. 어떻게 함수가 작동하는지 함수의 return값이 뭔지 말야

프로그램을 디자인하면서 타입을 먼저 생각하고
그리고 나서 코드를 구현하게 되는 거다.

보다 싶이
const add:Add = (a,b) => a + b
여기는 타입스크립트가 없어
왜냐면 타입스크립트가 이걸 다 알고 있기 때문이야 call signature가 설명해주고 있기 때문이다.


type Add = /* (a:number,b:number) => number */
타입스크립트에게 이 함수가 어떻게 호출되는지 설명해주는 부분이다.