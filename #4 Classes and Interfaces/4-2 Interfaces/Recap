type test1 = {

}
// type 사용해서 오브젝트의 모양을 설명함


type test2 = number
// type 사용해서 타입 alias를 만드는걸 설명함


type test3 =  1 | 2
// type 사용해서 특정값을 설명함


type PlayerA = {
    name:string
}

// 타입 상속 방법
type PlayerAA = PlayerA & {
    lastname:string
}

// 나중에 property를 넣고싶을땐 어떻게 해야될까?
// 이렇게하면 이미 PlayerAA이 정의되어있어서 중복되기에 오류가 발생한다.
// 하지만 인터페이스의 경우에는 다른데
type PlayerAA = {
    health:10
}

const playerA : PlayerAA = {
    name:"kronii",
    lastname:"ouro"
}



// 인터페이스를 상속하는 방법은 객체지향 프로그래밍의 컨셉과 유사하다.
interface PlayerB {
    name:string
}

interface PlayerBB extends PlayerB{
    lastname:string
}

// 이런식으로 인터페이스는 중복된다고 오류가 발생하지 않는다
// 이게 type과 interface의 오브젝트를 구현할 때 차이 이다.
interface PlayerBB{
    health:number
}

const playerB:PlayerBB = {
    name:"kronii",
    lastname:"ouro",
    health:10
}

/*
    타입스크립트에게 오브젝트의 모양을 알려주고 싶다면
    타입과 인터페이스 둘다 사용 가능하다.
 */





 type PlayerA = {
 firstName:string
}

interface PlayerB {
     firstName:string
}

class User implements PlayerB{
    constructor(
        public firstName:string
    ){}
}

class User1 implements PlayerA{
    constructor(
        public firstName:string
    ){}
}

/*
    타입스크립트 커뮤니티에서는
    클래스나 오브젝트의 모양을 정의하고 싶으면 인터페이스를

    다른 모든 경우에서는 타입을 쓰라고 한다.
 */